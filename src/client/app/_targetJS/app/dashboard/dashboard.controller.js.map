{"version":3,"sources":["app/dashboard/dashboard.controller.ts"],"names":[],"mappings":";;;;;;;;;AAAA,IAAO,GAAG,CAmDT;AAnDD,WAAO,GAAG;IAAC,IAAA,SAAS,CAmDnB;IAnDU,WAAA,SAAS,EAAC,CAAC;QAClB,IAAO,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC;QAEhC,YAAY,CAAC;QAWb;YAEI,6BAAkC,EAAe,EACN,WAAiC,EACtC,MAA2B;gBAF/B,OAAE,GAAF,EAAE,CAAa;gBACN,gBAAW,GAAX,WAAW,CAAsB;gBACtC,WAAM,GAAN,MAAM,CAAqB;gBAOjE,SAAI,GAAG;oBACH,KAAK,EAAE,YAAY;oBACnB,WAAW,EAAE,6DAA6D;iBAC7E,CAAC;gBACF,iBAAY,GAAU,CAAC,CAAC;gBACxB,WAAM,GAAc,EAAE,CAAC;gBACvB,UAAK,GAAU,WAAW,CAAC;gBAZvB,IAAI,QAAQ,GAAwB,CAAC,IAAI,CAAC,eAAe,EAAE,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;gBAC/E,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC;oBACvB,MAAM,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAC;gBAC5C,CAAC,CAAC,CAAC;YACP,CAAC;YAUD,6CAAe,GAAf;gBAAA,iBAKC;gBAJG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,eAAe,EAAE,CAAC,IAAI,CAAC,UAAC,IAAI;oBAChD,KAAI,CAAC,YAAY,GAAG,IAAI,CAAC;oBACzB,MAAM,CAAC,KAAI,CAAC,YAAY,CAAC;gBAC7B,CAAC,CAAC,CAAC;YACP,CAAC;YAED,uCAAS,GAAT;gBAAA,iBAKC;gBAJG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,UAAC,IAAI;oBAC1C,KAAI,CAAC,MAAM,GAAG,IAAI,CAAC;oBACnB,MAAM,CAAC,KAAI,CAAC,MAAM,CAAC;gBACvB,CAAC,CAAC,CAAC;YACP,CAAC;YA7BW;2BAAC,MAAM,CAAC,IAAI,CAAC;2BACZ,MAAM,CAAC,aAAa,CAAC;2BACrB,MAAM,CAAC,QAAQ,CAAC;mCAFJ;YA8B7B,0BAAC;QAAD,CAhCA,AAgCC,IAAA;QAhCY,6BAAmB,sBAgC/B,CAAA;QAED,OAAO;aACF,MAAM,CAAC,eAAe,CAAC;aACvB,UAAU,CAAC,qBAAqB,EAAE,mBAAmB,CAAC,CAAC;IAChE,CAAC,EAnDU,SAAS,GAAT,aAAS,KAAT,aAAS,QAmDnB;AAAD,CAAC,EAnDM,GAAG,KAAH,GAAG,QAmDT","file":"app/dashboard/dashboard.controller.js","sourcesContent":["module app.dashboard {\n    import Inject = app.core.Inject;\n    import IPromise = angular.IPromise;\n    'use strict';\n\n    interface IDashboardVm {\n        news: { title: string, description: string };\n        messageCount: number;\n        people: Array<any>;\n        title: string;\n        getMessageCount: () => ng.IPromise<number>;\n        getPeople: () => ng.IPromise<Array<any>>;\n    }\n\n    export class DashboardController implements IDashboardVm {\n\n        constructor(@Inject('$q') private $q:ng.IQService,\n                    @Inject('dataservice') private dataservice:app.core.IDataService,\n                    @Inject('logger') private logger:blocks.logger.Logger) {\n            var promises:Array<IPromise<any>> = [this.getMessageCount(), this.getPeople()];\n            this.$q.all(promises).then(function () {\n                logger.info('Activated Dashboard View');\n            });\n        }\n\n        news = {\n            title: 'helloworld',\n            description: 'Hot Towel Angular is a SPA template for Angular developers.'\n        };\n        messageCount:number = 0;\n        people:Array<any> = [];\n        title:string = 'Dashboard';\n\n        getMessageCount() {\n            return this.dataservice.getMessageCount().then((data) => {\n                this.messageCount = data;\n                return this.messageCount;\n            });\n        }\n\n        getPeople() {\n            return this.dataservice.getPeople().then((data) => {\n                this.people = data;\n                return this.people;\n            });\n        }\n    }\n\n    angular\n        .module('app.dashboard')\n        .controller('DashboardController', DashboardController);\n}\n"],"sourceRoot":"/source/"}