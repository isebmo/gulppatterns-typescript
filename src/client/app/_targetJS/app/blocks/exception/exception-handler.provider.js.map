{"version":3,"sources":["app/blocks/exception/exception-handler.provider.ts"],"names":[],"mappings":"AAAA,kEAAkE;AAClE,6EAA6E;AAE7E,IAAO,MAAM,CA0DZ;AA1DD,WAAO,MAAM;IAAC,IAAA,SAAS,CA0DtB;IA1Da,WAAA,WAAS,EAAC,CAAC;QACvB,YAAY,CAAC;QAKb;YAEE;gBAFF,iBAWC;gBARC,WAAM,GAA4B;oBAChC,cAAc,EAAE,SAAS;iBAC1B,CAAA;gBAKD,SAAI,GAA8C,cAAQ,MAAM,CAAC,EAAE,MAAM,EAAE,KAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAA;YAR3E,CAAC;YAKjB,4CAAS,GAAT,UAAU,cAAmB;gBAC3B,IAAI,CAAC,MAAM,CAAC,cAAc,GAAG,cAAc,CAAC;YAC9C,CAAC;YARM,gCAAO,GAAkB,EAAE,CAAC;YAUrC,+BAAC;QAAD,CAXA,AAWC,IAAA;QAXY,oCAAwB,2BAWpC,CAAA;QAED,MAAM,CAAC,OAAO,GAAG,CAAC,UAAU,CAAC,CAAC;QAC9B,gBAAgB,QAAiC;YAC/C,QAAQ,CAAC,SAAS,CAAC,mBAAmB,EAAE,sBAAsB,CAAC,CAAC;QAClE,CAAC;QAED,sBAAsB,CAAC,OAAO,GAAG,CAAC,WAAW,EAAE,kBAAkB,EAAE,QAAQ,CAAC,CAAC;QAC7E;;;;;;WAMG;QACH,gCAAgC,SAAsC,EACpE,gBAAqB,EACrB,MAA4B;YAC5B,MAAM,CAAC,UAAS,SAAc,EAAE,KAAU;gBACxC,8CAA8C;gBAC9C,IAAI,cAAc,GAAG,gBAAgB,CAAC,MAAM,CAAC,cAAc,IAAI,EAAE,CAAC;gBAClE,IAAI,SAAS,GAAG,EAAE,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;gBACvD,SAAS,CAAC,OAAO,GAAG,cAAc,GAAG,SAAS,CAAC,OAAO,CAAC;gBACvD,SAAS,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;gBAC5B;;;;;;;;mBAQG;gBACH,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;YAC7C,CAAC,CAAC;QACJ,CAAC;QAED,OAAO;aACJ,MAAM,CAAC,kBAAkB,CAAC;aAC1B,QAAQ,CAAC,kBAAkB,EAAE,wBAAwB,CAAC;aACtD,MAAM,CAAC,MAAM,CAAC,CAAC;IACpB,CAAC,EA1Da,SAAS,GAAT,gBAAS,KAAT,gBAAS,QA0DtB;AAAD,CAAC,EA1DM,MAAM,KAAN,MAAM,QA0DZ","file":"app/blocks/exception/exception-handler.provider.js","sourcesContent":["// Include in index.html so that app level exceptions are handled.\n// Exclude from testRunner.html which should run exactly what it wants to run\n\nmodule blocks.exception {\n  'use strict';\n\n  export interface IExceptionHandlerConfig {\n    appErrorPrefix: string\n  }\n  export class ExceptionHandlerProvider {\n    static $inject: Array<string> = [];\n    constructor() { }\n    config: IExceptionHandlerConfig = {\n      appErrorPrefix: undefined\n    }\n\n    configure(appErrorPrefix: any) {\n      this.config.appErrorPrefix = appErrorPrefix;\n    }\n    $get: () => { config: IExceptionHandlerConfig } = () => { return { config: this.config }; }\n  }\n\n  config.$inject = ['$provide'];\n  function config($provide: ng.auto.IProvideService) {\n    $provide.decorator('$exceptionHandler', extendExceptionHandler);\n  }\n\n  extendExceptionHandler.$inject = ['$delegate', 'exceptionHandler', 'logger'];\n  /**\n   * Extend the $exceptionHandler service to also display a toast.\n   * @param  {Object} $delegate\n   * @param  {Object} exceptionHandler\n   * @param  {Object} logger\n   * @return {Function} the decorated $exceptionHandler service\n   */\n  function extendExceptionHandler($delegate: ng.IExceptionHandlerService,\n    exceptionHandler: any,\n    logger: blocks.logger.Logger) {\n    return function(exception: any, cause: any) {\n      //            var appErrorPrefix = '[Error] ';\n      var appErrorPrefix = exceptionHandler.config.appErrorPrefix || '';\n      var errorData = { exception: exception, cause: cause };\n      exception.message = appErrorPrefix + exception.message;\n      $delegate(exception, cause);\n      /**\n       * Could add the error to a service's collection,\n       * add errors to $rootScope, log errors to remote web server,\n       * or log locally. Or throw hard. It is entirely up to you.\n       * throw exception;\n       *\n       * @example\n       *     throw { message: 'error message we added' };\n       */\n      logger.error(exception.message, errorData);\n    };\n  }\n\n  angular\n    .module('blocks.exception')\n    .provider('exceptionHandler', ExceptionHandlerProvider)\n    .config(config);\n}\n"],"sourceRoot":"/source/"}