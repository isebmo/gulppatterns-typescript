{"version":3,"sources":["app/blocks/logger/logger.ts"],"names":[],"mappings":"AAAA,IAAO,MAAM,CA4CZ;AA5CD,WAAO,MAAM;IAAC,IAAA,MAAM,CA4CnB;IA5Ca,WAAA,MAAM,EAAC,CAAC;QACpB,YAAY,CAAC;QAUb;YAEE,gBAAoB,IAAoB,EAAU,MAAc;gBAA5C,SAAI,GAAJ,IAAI,CAAgB;gBAAU,WAAM,GAAN,MAAM,CAAQ;YAAI,CAAC;YAErE,qCAAqC;YACrC,oBAAG,GAAH;gBAAI,cAAc;qBAAd,WAAc,CAAd,sBAAc,CAAd,IAAc;oBAAd,6BAAc;;gBAChB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACtB,CAAC;YAED,sBAAK,GAAL,UAAM,OAAe,EAAE,IAAS,EAAE,KAAc;gBAC9C,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;gBAClC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,OAAO,EAAE,YAAY,EAAE,KAAK,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;YAChF,CAAC;YAED,qBAAI,GAAJ,UAAK,OAAe,EAAE,IAAS,EAAE,KAAc;gBAC7C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;gBACjC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,OAAO,EAAE,YAAY,EAAE,KAAK,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;YAC9E,CAAC;YAED,wBAAO,GAAP,UAAQ,OAAe,EAAE,IAAS,EAAE,KAAc;gBAChD,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;gBACpC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,GAAG,OAAO,EAAE,YAAY,EAAE,KAAK,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;YACjF,CAAC;YAED,wBAAO,GAAP,UAAQ,OAAe,EAAE,IAAS,EAAE,KAAc;gBAChD,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;gBACpC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,GAAG,OAAO,EAAE,YAAY,EAAE,KAAK,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;YACjF,CAAC;YA1BM,cAAO,GAAkB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YA2BrD,aAAC;QAAD,CA5BA,AA4BC,IAAA;QA5BY,aAAM,SA4BlB,CAAA;QAED,OAAO;aACJ,MAAM,CAAC,eAAe,CAAC;aACvB,OAAO,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IAC/B,CAAC,EA5Ca,MAAM,GAAN,aAAM,KAAN,aAAM,QA4CnB;AAAD,CAAC,EA5CM,MAAM,KAAN,MAAM,QA4CZ","file":"app/blocks/logger/logger.js","sourcesContent":["module blocks.logger {\n  'use strict';\n\n  export interface ILogger {\n    info: (message: string, data?: {}, title?: string) => void;\n    error: (message: string, data?: {}, title?: string) => void;\n    success: (message: string, data?: {}, title?: string) => void;\n    warning: (message: string, data?: {}, title?: string) => void;\n    log: (...args: any[]) => void;\n  }\n\n  export class Logger implements ILogger {\n    static $inject: Array<string> = ['$log', 'toastr'];\n    constructor(private $log: ng.ILogService, private toastr: Toastr) { }\n\n    // straight to console; bypass toastr\n    log(...args: any[]) {\n      this.$log.log(args);\n    }\n\n    error(message: string, data?: {}, title?: string) {\n      this.toastr.error(message, title);\n      this.$log.error('Error: ' + message, '\\nSummary:', title, '\\nDetails:', data);\n    }\n\n    info(message: string, data?: {}, title?: string) {\n      this.toastr.info(message, title);\n      this.$log.info('Info: ' + message, '\\nSummary:', title, '\\nDetails:', data);\n    }\n\n    success(message: string, data?: {}, title?: string) {\n      this.toastr.success(message, title);\n      this.$log.info('Success: ' + message, '\\nSummary:', title, '\\nDetails:', data);\n    }\n\n    warning(message: string, data?: {}, title?: string) {\n      this.toastr.warning(message, title);\n      this.$log.warn('Warning: ' + message, '\\nSummary:', title, '\\nDetails:', data);\n    }\n  }\n\n  angular\n    .module('blocks.logger')\n    .service('logger', Logger);\n}\n"],"sourceRoot":"/source/"}